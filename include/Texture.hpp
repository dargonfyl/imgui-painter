#pragma once


namespace Im_Painter {
	typedef unsigned int Texture_id_t;  // Generated by GL

	enum Texture_Format {  // These are the only ones we need
		RGB,
		RGBA
	};


	/**
	 * Texture class to pass to GL.
	 * 
	 */
	class Texture {
		private:
		Texture_id_t id;
		unsigned int width, height;
		unsigned int interal_format, image_format;


		public:
		/**
		 * Allocates the texture based on height & width.
		 * 
		 * @param width            Image width. Non-zero.
		 * @param height           Image height. Non-zero.
		 * @param data             Image data. Must exist.
		 * @param internal_format  Internal format. Must be A Texture_Format enum
		 * @param image_format     Image format. Must be A Texture_Format enum
		 */
		Texture(unsigned int width, unsigned int height, unsigned char *data, Texture_Format internal_format, Texture_Format image_format);


		/**
		 * Deconstructor; de-allocates the texture in GL.
		 */
		~Texture();


		void update(unsigned char *data);


		/**
		 * Returns id of this texture.
		 */
		Texture_id_t get_id();


		/**
		 * Bind texture to use.
		 */
		void bind();
	};
} // namespace Im_Painter
